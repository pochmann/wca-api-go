from glob import glob
from os.path import join
import re, subprocess

# Analyze the types in the .tsv files
types = []
for path in sorted(glob(join('data', 'WCA_export_*.tsv'))):
    tablename = re.search('export_(.*).tsv', path).group(1)
    typename = 'Wca' + re.sub('ies$', 'y', tablename).rstrip('s')
    varname = 'wca' + tablename
    with open(path, encoding='utf-8') as tf:

        # Determine the column types (int or string)
        fieldnames = next(tf).strip().split('\t')
        fieldtypes = ['int32'] * len(fieldnames)
        for row in tf:
            for i, value in enumerate(row.strip().split('\t')):
                if fieldtypes[i] == 'int32':
                    try:
                        int(value)
                    except:
                        fieldtypes[i] = 'str32'
        types.append((typename, varname, fieldnames, fieldtypes, tablename))

# Generate the .go file
with open('wca-data.go', 'w') as f:
    def p(*stuff):
        print(*stuff, file=f)

    # Output the package header
    p('// This code was generated by generate_loader.py and should not be edited.')
    p('package main')
    p('import ("bufio"\n"os"\n"path"\n"strings")')

    # Output the variable declarations
    for typename, varname, fieldnames, fieldtypes, tablename in types:
        p('var ' + varname + ' ' + '[]' + typename)

    # Output the type declarations
    for typename, varname, fieldnames, fieldtypes, tablename in types:
        p('type %s struct {' % typename)
        for fieldname, fieldtype in zip(fieldnames, fieldtypes):
            p('{} {} `json:"{}"`'.format(fieldname[0].upper() + fieldname[1:], fieldtype, fieldname))
        p('}')

    # Output the loading code
    p('func LoadWcaData() {')
    p('var file *os.File')
    p('var scanner *bufio.Scanner')
    p('var ctr int')
    for typename, varname, fieldnames, fieldtypes, tablename in types:

        # Setup-code
        p('''\n// Open the file, count the data rows, prepare the scanner
	file, _ = os.Open(path.Join("data", "WCA_export_{tablename}.tsv"))
	defer file.Close()
	scanner = bufio.NewScanner(file)
	ctr = -1
	for scanner.Scan() {{
		ctr++
	}}
	file.Seek(0, 0)
	scanner = bufio.NewScanner(file)
	scanner.Scan()

	// Load the data
	{varname} = make([]{typename}, ctr)
	for i := range {varname} {{
		scanner.Scan()
		row := strings.Split(scanner.Text(), "\\t")'''.format(tablename=tablename, varname=varname, typename=typename))

        # Code for loading the fields
        p('x := &' + varname + '[i]')
        i = 0
        for fieldname, fieldtype in zip(fieldnames, fieldtypes):
            p('x.{} = get{}(row[{}])'.format(fieldname[0].upper() + fieldname[1:], fieldtype.title(), i))
            i += 1

        # Close the loop
        p('}')
    p('}')

# Format the generated code
subprocess.call(['gofmt', '-w', 'wca-data.go'])
